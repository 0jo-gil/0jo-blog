{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/react-hook-form/","result":{"data":{"markdownRemark":{"rawMarkdownBody":"\n## React-Hook-Form을 사용하면서\n\nreact-native의 프로젝트를 react로 마이그레이션 하면서 프로젝트에서 form이 많이 사용되었다. 이러한 form 의 효율적인 관리를 위하여 react-hook-form을 적극 도입하여 기존에 validation form 상태 관리 등 모든 부분을 일일이 관리하고 있었지만 확장성 있게 관리해보려고 한다.\n\n항상 라이브러리에 대한 기록은 오롯이 나를 위한 기록이다. 추후에 재사용을 할 때 활용방안에 대한 실수를 줄이고 더 나은 활용 방식에 대한 고안을 위해 기록한다.\n\n\n### validate의 편리함\n\n기존 프로젝트에서 모든 form의 필수요건, 조건 등에 관리를 validation 메소드를 통해 관리했다. 다양한 폼요소에 대한 관리 포인트가 늘어나면 조건이나 복잡도 역시 늘어나게 되었다. react-hook-form을 사용하면서 조금 더 직관적으로 파악할 수 있는 방식을 채택했다.\n\n아래 예시는 현재 프로젝트에서 사용한 간단한 예시이다.\n\n```tsx\nconst form = () => {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tgetValues,\n\t\tformState: { errors }\n\t} = useForm({\n\t\t// 해당 폼 요소들의 default 값\n\t\tdefaultValues: {\n\t\t\tid: '',\n\t\t\tpassword: '',\n\t\t\trePassword: ''\n\t})\n\t\n\t// form onSubmit (data: 객체와 key value로 폼 요소 name이 key로 값이 value로 반환)\n\tconst onSubmit = (data) => {\n\t\tconsole.log(data);\n\t}\n\t\n\t// formState error 객체 반환 (각 폼 요소에 설정한 조건에 대한 상태 반환)\n\tconst onInvalid = (errors) => {\n\t\tconsole.log(errors)\n\t}\n\n\treturn (\n\t\t<form onSubmit={handleSubmit(onSubmit, onInvalid)}>\n\t\t\t<input type=\"text\" name=\"id\" {...register('id', {\n\t\t\t\trequired: \"아이디를 입력하세요.\",\n\t\t\t\tminLength: {\n\t\t\t\t\tvalue: 5,\n\t\t\t\t\tmessage: \"아이디는 최소 5자 이상 입니다.\"\n\t\t\t\t}\n\t\t\t})} />\n\t\t\t<input type=\"password\" name=\"password\" {...register('password', {\n\t\t\t\trequired: \"비밀번호를 입력해주세요.\",\n\t\t\t\t...\n\t\t\t})} />\n\t\t\t<input type=\"password\" name=\"rePassword\" {...register('rePassword', {\n\t\t\t\trequired: \"비밀번호를 재입력해주세요.\",\n        minLength: {\n            value: 5,\n            message: '비밀번호는 5자 이상입니다.'\n        },\n        validate: (value) => value === getValues('password') || '비밀번호가 일치하지 않습니다.'\n\t\t\t})} />\n\n\t\t\t<button type=\"submit\">제출</button>\n\t\t</form>\n\t)\n}\n```\n\n위에서 활용한 `useForm`의 기능을 간단하게 정리하려고 한다.\n\n1. **register**: (name: string, options?)\n- 위 메소드는 해당 폼요소를 등록하고 유효성 검사 규칙을 적용할 수 있다.\n- 첫번째 인자로 해당 요소 `name`, 두번째 인자로 `검사 옵션`전달\n\n2. **handleSubmit**: ((data: Object, e?: Event), (errors: Object, e?: Event))\n- 첫번째 인자는 form submit successful callback 함수 전달\n- 두번째 인자는 form error callback 함수 전달\n\n3. **getValues**: (payload?: string | string[])\n- 메소드명에서 추측할 수 있듯이 해당 폼 name을 가진 values를 반환한다.\n- 위에서 활용한 방안은 폼 요소에 validate에서 각 값을 비교하여 검증하는 방식으로 활용","frontmatter":{"title":"React-Hook-Form 활용 방안","date":"2024-01-14","category":"React","slug":"react-hook-form"}}},"pageContext":{"slug":"react-hook-form"}},"staticQueryHashes":[],"slicesMap":{}}